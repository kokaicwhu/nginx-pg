worker_processes  1;
error_log logs/error.log;

events {
    worker_connections 1024;
}

http {

    server {
        listen 80;
        server_name localhost;
        
        location / {
            default_type text/html;
            content_by_lua_block {
                ngx.say("Hello World")
            }
        }

        location = /add {
            # only allow internal call
            internal;

            # example to cal the sum value
            # here to complete the database or cache operations
            # to seperate the basic madule and application logic
            content_by_lua_block {
                ngx.sleep(0.1)
                local args = ngx.req.get_uri_args()
                ngx.print(tonumber(args.a) + tonumber(args.b))
            }
        }

        location = /sub {
            internal;
            content_by_lua_block {
                ngx.sleep(0.1)
                local args = ngx.req.get_uri_args()
                ngx.print(tonumber(args.a) - tonumber(args.b))
            }
        } 

        location = /api/test {
            content_by_lua_block {
                local res = ngx.location.capture(
                    "/add", {args={a=3, b=8}}
                )
                ngx.say("status:", res.status, " response:", res.body)
            }
        }

        location = /app/test_parallels {
            content_by_lua_block {
                local start_time = ngx.now()
                local res1, res2 = ngx.location.capture_multi(
                    {
                        {"/add", {args={a=3, b=8}}},
                        {"/sub", {args={a=3, b=8}}}
                    }
                )
                ngx.say("status:", res1.status, " response:", res1.body)
                ngx.say("status:", res2.status, " response:", res2.body)
                ngx.say("time used:", ngx.now() - start_time)
            }
        }

        location = /app/test_queue {
            content_by_lua_block {
                local start_time = ngx.now()
                local res1 = ngx.location.capture_multi(
                    {{"/add", {args={a=3, b=8}}}}
                )
                local res2 = ngx.location.capture_multi(
                    {{"/sub", {args={a=3, b=8}}}}
                )
                ngx.say("status:", res1.status, " response:", res1.body)
                ngx.say("status:", res2.status, " response:", res2.body)
                ngx.say("time used:", ngx.now() - start_time)
            }
        }

        # External redirect
        location = /destinition {
            content_by_lua_block {
                ngx.say([[Here is destinition]])
            }
        }

        location = /external_redirect {
            rewrite_by_lua_block {
                return ngx.redirect('/destinition');
            }
        }

        # Request URI arguments
        # get_uri_args() and get_post_args()
        # ex: curl '127.0.0.1/print_param?a=1&b=2' -d 'c=3&d=4'
        # [GET ] key:b v:2
        # [GET ] key:a v:1
        # [POST] key:d v:4
        # [POST] key:c v:3
        location /print_param {
            content_by_lua_block {
                local args = ngx.req.get_uri_args()
                for k,v in pairs(args) do
                    ngx.say("[GET ] key:", k, " value:", v)
                end

                -- must read the body before retreive
                ngx.req.read_body()
                local args = ngx.req.get_post_args()
                for k,v in pairs(args) do
                    ngx.say("[POST] key:", k, " value:", v)
                end
            }
        }
    }
}
